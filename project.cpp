#include <iostream>
#include <stdio.h>
#include <string.h>
#include "DLList.h"
using namespace std;
int main()
{
	char arr[300];
	char number1[50];
	char number2[50];
	char number3[50];
	char number4[50];
	char number5[50];
	char operator44[4];
	int i=0;
	int j=0;
	int count=0;
	FILE *fp;
	fp=fopen("input.txt","r");
	while(!feof(fp))
	{
		char c;
		fscanf(fp,"%c \n",&c);
		arr[i]=c;
		if(c=='+' || c=='*')
		{
			operator44[count]=c;
			count++;
		}
		i++;	
	}
	fclose(fp);
	arr[i]='\0';
	operator44[count]='\0';
	if(count==0)
	{
		MyBigInt<int>result,backupresult;
		result.createBigInt(arr);
		result.printBigInt();
		cout<<endl;
		backupresult.updateBigInt(result);
		FILE *fq;
		fq=fopen("output.txt","w");
		int w=0;
		int counti=0;
		backupresult.addToDLLHead(44);
		while(w!=44)
		{
			w=backupresult.deleteFromDLLTail();
			counti++;
		}
		counti--;
		while(counti>0)
		{
			w=result.deleteFromDLLHead();
			fprintf(fq,"%d",w);
			counti--;
		}
		fclose(fq);
	}
	if(count==1)
	{
		while(arr[j]!=operator44[0])
		{
			number1[j]=arr[j];
			j++;
		}
		number1[j]='\0';
		j++;
		int m=0;
		while(arr[j]!='\0')
		{
			number2[m]=arr[j];
			m++;
			j++;
		}
		number2[m]='\0';
		MyBigInt<int> n;
		n.createBigInt(number1);
		n.printBigInt();
		cout<<endl;
		MyBigInt<int> p;
		p.createBigInt(number2);
		p.printBigInt();
		cout<<endl;
		MyBigInt<int> result,backupresult;
		if(operator44[0]=='+')
		{
			result.addBigInt(n,p);
		}
		if(operator44[0]=='*')
		{
			result.multiplyBigInt(n,p);
		}
		result.printBigInt();
		backupresult.updateBigInt(result);
		FILE *fq;
		fq=fopen("output.txt","w");
		int w=0;
		int counti=0;
		backupresult.addToDLLHead(44);
		while(w!=44)
		{
			w=backupresult.deleteFromDLLTail();
			counti++;
		}
		counti--;
		while(counti>0)
		{
			w=result.deleteFromDLLHead();
			fprintf(fq,"%d",w);
			counti--;
		}
		fclose(fq);
	}
	if(count==2)
	{
		while(arr[j]!=operator44[0])
		{
			number1[j]=arr[j];
			j++;
		}
		number1[j]='\0';
		j++;
		int m=0;
		while(arr[j]!=operator44[1])
		{
			number2[m]=arr[j];
			m++;
			j++;
		}
		number2[m]='\0';
		m=0;
		j++;
		while(arr[j]!='\0')
		{
			number3[m]=arr[j];
			m++;
			j++;
		}
		number3[m]='\0';
		MyBigInt<int>n;
		MyBigInt<int>p;
		MyBigInt<int>q;
		MyBigInt<int>result,o,o1,o2,backupresult;
		n.createBigInt(number1);
		n.printBigInt();
		cout<<endl;
		p.createBigInt(number2);
		p.printBigInt();
		cout<<endl;
		q.createBigInt(number3);
		q.printBigInt();
		cout<<endl;
		if(operator44[0]=='*')
		{
			o.multiplyBigInt(n,p);
			if(operator44[1]=='*')
			{
				result.multiplyBigInt(o,q);
			}
			if(operator44[1]=='+')
			{
				result.addBigInt(o,q);
			}
		}
		if(operator44[0]=='+')
		{
			if(operator44[1]=='+')
			{
				o.addBigInt(n,p);
				result.addBigInt(o,q);
			}
			else
			{
				o1.updateBigInt(q);
				o2.updateBigInt(p);
				o.multiplyBigInt(o1,o2);
				result.addBigInt(o,n);
				
			}
		}
			result.printBigInt();
			backupresult.updateBigInt(result);
			FILE *fq;
			fq=fopen("output.txt","w");
			int w=0;
			int counti=0;
			backupresult.addToDLLHead(44);
			while(w!=44)
			{
				w=backupresult.deleteFromDLLTail();
				counti++;
			}
			counti--;
			while(counti>0)
			{
				w=result.deleteFromDLLHead();
				fprintf(fq,"%d",w);
				counti--;
			}
			fclose(fq);
	}	
	if(count==3)
	{
		while(arr[j]!=operator44[0])
		{
			number1[j]=arr[j];
			j++;
		}
		number1[j]='\0';
		j++;
		int m=0;
		while(arr[j]!=operator44[1])
		{
			number2[m]=arr[j];
			m++;
			j++;
		}
		number2[m]='\0';
		m=0;
		j++;
		while(arr[j]!=operator44[2])
		{
			number3[m]=arr[j];
			m++;
			j++;
		}
		number3[m]='\0';
		m=0;
		j++;
		while(arr[j]!='\0')
		{
			number4[m]=arr[j];
			m++;
			j++;
		}
		number4[m]='\0';
		MyBigInt<int>n;
		MyBigInt<int>p;
		MyBigInt<int>q;
		MyBigInt<int>x;
		MyBigInt<int>o,o1,o2,result1,result,backupresult;
		n.createBigInt(number1);
		n.printBigInt();
		cout<<endl;
		p.createBigInt(number2);
		p.printBigInt();
		cout<<endl;
		q.createBigInt(number3);
		q.printBigInt();
		cout<<endl;		
		x.createBigInt(number4);
		x.printBigInt();
		if(operator44[0]=='*')
		{
			o.multiplyBigInt(n,p);
			if(operator44[1]=='*')
			{
				result1.multiplyBigInt(o,q);
				if(operator44[2]=='*')
				{
					result.multiplyBigInt(result1,x);
				}
				else
				{
					result.addBigInt(result1,x);
				}
			}
			else
			{
				if(operator44[2]=='*')
				{
					o1.updateBigInt(q);
					o2.updateBigInt(x);
					result1.multiplyBigInt(o1,o2);
					result.addBigInt(result1,o);
				}
				else
				{
					result1.addBigInt(o,q);
					result.addBigInt(result1,x);
				}
			}
						
		}
		else
		{
			if(operator44[1]=='+')
			{
				if(operator44[2]=='+')
				{
					o.addBigInt(n,p);
					result1.addBigInt(q,x);
					result.addBigInt(o,result1);
				}
				else
				{
					o.multiplyBigInt(q,x);
					result1.addBigInt(n,p);
					result.addBigInt(o,result1);
				}
			}
			else
			{
				if(operator44[2]=='*')
				{
					o.multiplyBigInt(p,q);
					result1.multiplyBigInt(o,x);
					result.addBigInt(n,result1);
				}	
				else
				{
					o.multiplyBigInt(p,q);
					result1.addBigInt(n,o);
					result.addBigInt(result1,x);
				}			
			}	
		}
		cout<<endl;
		result.printBigInt();
		backupresult.updateBigInt(result);
		FILE *fq;
		fq=fopen("output.txt","w");
		int w=0;
		int counti=0;
		backupresult.addToDLLHead(44);
		while(w!=44)
		{
			w=backupresult.deleteFromDLLTail();
			counti++;
		}
		counti--;
		while(counti>0)
		{
			w=result.deleteFromDLLHead();
			fprintf(fq,"%d",w);
			counti--;
		}
		fclose(fq);
	}
	if(count==4)
	{
		while(arr[j]!=operator44[0])
		{
			number1[j]=arr[j];
			j++;
		}
		number1[j]='\0';
		j++;
		int m=0;
		while(arr[j]!=operator44[1])
		{
			number2[m]=arr[j];
			m++;
			j++;
		}
		number2[m]='\0';
		m=0;
		j++;
		while(arr[j]!=operator44[2])
		{
			number3[m]=arr[j];
			m++;
			j++;
		}
		number3[m]='\0';
		m=0;
		j++;
		while(arr[j]!=operator44[3])
		{
			number4[m]=arr[j];
			m++;
			j++;
		}
		number4[m]='\0';
		m=0;
		j++;
		while(arr[j]!='\0')
		{
			number5[m]=arr[j];
			m++;
			j++;
		}
		number5[m]='\0';
		MyBigInt<int>result1,result2,o,result,backupresult;
		MyBigInt<int>n;
		MyBigInt<int>p;
		MyBigInt<int>q;
		MyBigInt<int>x;
		MyBigInt<int>r;
		n.createBigInt(number1);
		n.printBigInt();
		cout<<endl;
		p.createBigInt(number2);
		p.printBigInt();
		cout<<endl;
		q.createBigInt(number3);
		q.printBigInt();
		cout<<endl;		
		x.createBigInt(number4);
		x.printBigInt();
		cout<<endl;
		r.createBigInt(number5);
		r.printBigInt();
		if(operator44[0]=='*')
		{
			o.multiplyBigInt(n,p);
			if(operator44[1]=='*')
			{
				result1.multiplyBigInt(o,q);
				if(operator44[2]=='*')
				{
					result2.multiplyBigInt(result1,x);
					if(operator44[3]=='*')
					{
						result.multiplyBigInt(result2,r);
					}
					else
					{
						result.addBigInt(result2,r);
					}
				}
				else
				{
					if(operator44[3]=='*')
					{
						result2.multiplyBigInt(x,r);
						result.addBigInt(result2,result1);	
					}
					else
					{
						result2.addBigInt(result1,x);
						result.addBigInt(result2,r);
					}
				}
			}
			else
			{
				if(operator44[2]=='*')
				{
					if(operator44[3]=='*')
					{
						result1.multiplyBigInt(q,x);
						result2.multiplyBigInt(result1,r);
						result.addBigInt(result2,o);
					}
					else
					{
						result1.multiplyBigInt(q,x);
						result2.addBigInt(result1,r);
						result.addBigInt(result2,o);
					}
				}
				else
				{
					if(operator44[3]=='+')
					{
						result1.addBigInt(o,q);
						result2.addBigInt(x,r);
						result.addBigInt(result1,result2);
					}		
					else
					{
						result1.multiplyBigInt(x,r);
						result2.addBigInt(o,q);
						result.addBigInt(result1,result2);			
					}
				}
				
			}
		}
		else
		{
			if(operator44[1]=='+')
			{
				if(operator44[2]=='+')
				{
					if(operator44[3]=='+')
					{
						o.addBigInt(n,p);
						result1.addBigInt(o,q);
						result2.addBigInt(r,x);
						result.addBigInt(result1,result2);
					}
					else
					{
						o.multiplyBigInt(r,x);
						result1.addBigInt(n,p);
						result2.addBigInt(result1,o);
						result.addBigInt(result2,q);
					}
				}
				else
				{
					if(operator44[3]=='+')
					{
						o.multiplyBigInt(q,x);
						result1.addBigInt(o,r);
						result2.addBigInt(result1,p);
						result.addBigInt(result2,n);	
					}
					else
					{
						o.multiplyBigInt(x,r);
						result1.multiplyBigInt(q,o);
						result2.addBigInt(result1,p);
						result.addBigInt(result2,n);
					}
				
				}
			}
			else
			{
				if(operator44[2]=='+')
				{
					if(operator44[3]=='+')
					{
						o.multiplyBigInt(p,q);
						result2.addBigInt(n,o);
						result1.addBigInt(result2,x);
						result.addBigInt(result1,r);
					}
					else
					{
						o.multiplyBigInt(x,r);
						result2.multiplyBigInt(p,q);
						result1.addBigInt(result2,o);
						result.addBigInt(result1,n);
					}
				}
				else
				{
					if(operator44[3]=='+')
					{
						o.multiplyBigInt(p,q);
						result2.multiplyBigInt(o,x);
						result1.addBigInt(result2,n);
						result.addBigInt(result1,r);
					}
					else
					{
						o.multiplyBigInt(x,r);
						result2.multiplyBigInt(o,q);
						result1.multiplyBigInt(result2,p);
						result.addBigInt(n,result1);
					}	
				}
			}	
		}
		cout<<endl;
		result.printBigInt();
		backupresult.updateBigInt(result);
		FILE *fq;
		fq=fopen("output.txt","w");
		int w=0;
		int counti=0;
		backupresult.addToDLLHead(44);
		while(w!=44)
		{
			w=backupresult.deleteFromDLLTail();
			counti++;
		}
		counti--;
		while(counti>0)
		{
			w=result.deleteFromDLLHead();
			fprintf(fq,"%d",w);
			counti--;
		}
		fclose(fq);
	}
}
